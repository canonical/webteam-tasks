version: "3"

vars:
  VENV_DIR: .venv
  VENV_BIN: "{{ .VENV_DIR }}/bin"
  PYTHON_BIN: "{{ .VENV_BIN }}/python3"
  PIP_BIN: "{{ .VENV_BIN }}/pip3"

env:
  PORT: 3002
  PATH: "{{ .VENV_BIN }}:$PATH"

dotenv: [".env", ".env.local"]

# Available tasks:
# - start (default)
# - clean
# - test
# - lint
# - format
tasks:
  default:
    cmds:
      - task: start

  start:
    ignore_error: true
    deps:
      - install-python
      - install-yarn
      - compose-up
    cmds:
      - PATH="{{ .VENV_BIN }}:$PATH" yarn start
      - defer: { task: compose-down }

  clean:
    cmds:
      - rm -rf static/css node_modules {{ .VENV_DIR }} .task

  test:
    cmds:
      - echo "No tests yet"

  lint:
    deps:
      - install-python
      - install-yarn
    cmds:
      # Python linting
      - "{{ .VENV_BIN }}/flake8 --extend-ignore=E203 webapp"
      - "{{ .VENV_BIN }}/black --check --line-length 79 webapp"
      # CSS linting
      - npx stylelint static/**/*.scss
      # Jinja2 linting
      - "{{ .VENV_BIN }}/djlint templates/**"

  format:
    deps:
      - install-python
      - install-yarn
    cmds:
      # Python formatting
      - "{{ .VENV_BIN }}/black --line-length 79 webapp"
      # CSS formatting
      - npx stylelint --fix static/**/*.scss
      # Jinja2 formatting
      - "{{ .VENV_BIN }}/djlint --reformat templates/**"

  # Docker services
  compose-up:
    internal: true
    preconditions:
      - which docker
    cmds:
      - docker compose up -d

  compose-down:
    cmds:
      - docker compose down

  # Custom tools versioning setup (mise, python, node, etc.)
  setup-mise:
    internal: true
    desc: "Setup mise"
    preconditions:
      - which curl
    status:
      - ! which mise
    cmds:
      - curl https://mise.run | sh

  setup-tools:
    deps:
      - setup-mise
    cmds:
      - mise install

  # Python virtual environment
  venv:
    internal: true
    desc: "Setup python virtual environment"
    deps:
      - setup-tools
    status:
      - ! -f {{ .PYTHON_BIN }}
    cmds:
      - python3 -m venv .venv

  install-python:
    internal: true
    desc: "Install python packages"
    deps:
      - venv
    sources:
      - requirements.txt
    generates:
      - "{{ .VENV_DIR }}/*"
    cmds:
      - "{{ .PIP_BIN }} install -r requirements.txt"

  # Node.js package manager
  install-yarn:
    internal: true
    desc: "Install yarn packages"
    deps:
      - setup-tools
    status:
      - which yarn
      - which node
    sources:
      - yarn.lock
      - package.json
    generates:
      - "node_modules/**"
    cmds:
      - yarn install
